{
  "service": {
    "service": "crud-serverless-users",
    "serviceObject": {
      "name": "crud-serverless-users"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs14.x",
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:*"
              ],
              "Resource": "arn:aws:dynamodb:us-east-1:527802614022:table/usersTable"
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:*"
              ],
              "Resource": "arn:aws:s3:::bucket-serverless-course/*"
            }
          ]
        }
      },
      "environment": {
        "BUCKET": "bucket-serverless-course"
      },
      "stage": "dev",
      "region": "us-east-1",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "GetDashusersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/crud-serverless-users-dev-get-users"
            }
          },
          "CreateDashusersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/crud-serverless-users-dev-create-users"
            }
          },
          "UpdateDashusersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/crud-serverless-users-dev-update-users"
            }
          },
          "DeleteDashusersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/crud-serverless-users-dev-delete-users"
            }
          },
          "SignedUrlLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/crud-serverless-users-dev-signedUrl"
            }
          },
          "ThumbGeneratorLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/crud-serverless-users-dev-thumbGenerator"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "crud-serverless-users",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/crud-serverless-users-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/crud-serverless-users-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][1]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "crud-serverless-users",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "BaseLambdaLayer": {
            "Type": "AWS::Lambda::LayerVersion",
            "Properties": {
              "Content": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/crud-serverless-users/dev/1706816528815-2024-02-01T19:42:08.815Z/nodejs.zip"
              },
              "LayerName": "prod-dependencies",
              "CompatibleRuntimes": [
                "nodejs14.x"
              ]
            }
          },
          "GetDashusersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/crud-serverless-users/dev/1706816528815-2024-02-01T19:42:08.815Z/get-users.zip"
              },
              "Handler": "getUsers/handler.getUsers",
              "Runtime": "nodejs14.x",
              "FunctionName": "crud-serverless-users-dev-get-users",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "BUCKET": "bucket-serverless-course"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetDashusersLogGroup"
            ]
          },
          "CreateDashusersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/crud-serverless-users/dev/1706816528815-2024-02-01T19:42:08.815Z/create-users.zip"
              },
              "Handler": "createUsers/handler.createUsers",
              "Runtime": "nodejs14.x",
              "FunctionName": "crud-serverless-users-dev-create-users",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "BUCKET": "bucket-serverless-course"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateDashusersLogGroup"
            ]
          },
          "UpdateDashusersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/crud-serverless-users/dev/1706816528815-2024-02-01T19:42:08.815Z/update-users.zip"
              },
              "Handler": "updateUsers/handler.updateUsers",
              "Runtime": "nodejs14.x",
              "FunctionName": "crud-serverless-users-dev-update-users",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "BUCKET": "bucket-serverless-course"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateDashusersLogGroup"
            ]
          },
          "DeleteDashusersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/crud-serverless-users/dev/1706816528815-2024-02-01T19:42:08.815Z/delete-users.zip"
              },
              "Handler": "deleteUsers/handler.deleteUsers",
              "Runtime": "python3.8",
              "FunctionName": "crud-serverless-users-dev-delete-users",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "BUCKET": "bucket-serverless-course"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteDashusersLogGroup"
            ]
          },
          "SignedUrlLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/crud-serverless-users/dev/1706816528815-2024-02-01T19:42:08.815Z/signedUrl.zip"
              },
              "Handler": "signedUrl/handler.signedS3Url",
              "Runtime": "nodejs14.x",
              "FunctionName": "crud-serverless-users-dev-signedUrl",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "BUCKET": "bucket-serverless-course"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SignedUrlLogGroup"
            ]
          },
          "ThumbGeneratorLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/crud-serverless-users/dev/1706816528815-2024-02-01T19:42:08.815Z/thumbGenerator.zip"
              },
              "Handler": "thumbnail/handler.thumbnailGenerator",
              "Runtime": "nodejs14.x",
              "FunctionName": "crud-serverless-users-dev-thumbGenerator",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "BUCKET": "bucket-serverless-course"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Layers": [
                {
                  "Ref": "BaseLambdaLayer"
                }
              ]
            },
            "DependsOn": [
              "ThumbGeneratorLogGroup"
            ]
          },
          "GetDashusersLambdaVersionQjzCQ5PZosMB4iaBNUhLYyME08MqLh2HoWrdocSEg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetDashusersLambdaFunction"
              },
              "CodeSha256": "/KTJYAiuHqexAZANni0DGX31HIWznsoesispfEoi/WU="
            }
          },
          "CreateDashusersLambdaVersionO6WpxkhrpOhTHoz9XvGNzlhbYVGX1LhDtV2CnOi0Q": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateDashusersLambdaFunction"
              },
              "CodeSha256": "pKF7ECAsRGj0WOyef4mWMdm/lRsDIDqPn+rgS8r0MqU="
            }
          },
          "UpdateDashusersLambdaVersiongbCKgCjvLKWhriqwyPPMWFgn8cuFbeITbDFl6Moc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateDashusersLambdaFunction"
              },
              "CodeSha256": "O8sFnNnCZSuAufWY5D7itl11BGSWls7Kzk5ilA49kpo="
            }
          },
          "DeleteDashusersLambdaVersionJtPiwxrMSj1x1dV0cfXdDfv0uIg5j06F2zg2yxXBE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteDashusersLambdaFunction"
              },
              "CodeSha256": "NG5n5cGrJH01F7siu5F0/7loQBH+vUesawA4vi+AEv0="
            }
          },
          "SignedUrlLambdaVersionkqkvEnXKbGEj4dhHg0wIxatmlFghENTx0nDrEto1bLM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SignedUrlLambdaFunction"
              },
              "CodeSha256": "aII/0OqdgVytUxjT3o8x+rfvAfcKbuKamdjkGSMSdUY="
            }
          },
          "ThumbGeneratorLambdaVersion1gTeNwaLXSJcyvXhpEggnbHsBAy275Prm0WQPH8gYM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ThumbGeneratorLambdaFunction"
              },
              "CodeSha256": "K6NBsaaz0GkZNqIUo93ucFtgVXSWbruIBaY2gm8NFME="
            }
          },
          "ThumbGeneratorCustomS31": {
            "Type": "Custom::S3",
            "Version": 1,
            "DependsOn": [
              "ThumbGeneratorLambdaFunction",
              "CustomDashresourceDashexistingDashs3LambdaFunction"
            ],
            "Properties": {
              "ServiceToken": {
                "Fn::GetAtt": [
                  "CustomDashresourceDashexistingDashs3LambdaFunction",
                  "Arn"
                ]
              },
              "FunctionName": "crud-serverless-users-dev-thumbGenerator",
              "BucketName": "bucket-serverless-course",
              "BucketConfigs": [
                {
                  "Event": "s3:ObjectCreated:*",
                  "Rules": [
                    {
                      "Prefix": "upload/"
                    }
                  ]
                }
              ]
            }
          },
          "IamRoleCustomResourcesLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "crud-serverless-users",
                        "custom-resources-lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "s3",
                              "",
                              "",
                              "bucket-serverless-course"
                            ]
                          ]
                        },
                        "Action": [
                          "s3:PutBucketNotification",
                          "s3:GetBucketNotification"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "lambda",
                              {
                                "Ref": "AWS::Region"
                              },
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "function",
                              "*"
                            ]
                          ]
                        },
                        "Action": [
                          "lambda:AddPermission",
                          "lambda:RemovePermission"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "CustomDashresourceDashexistingDashs3LambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/crud-serverless-users/dev/1706816528815-2024-02-01T19:42:08.815Z/custom-resources.zip"
              },
              "FunctionName": "crud-serverless-users-dev-custom-resource-existing-s3",
              "Handler": "s3/handler.handler",
              "MemorySize": 1024,
              "Runtime": "nodejs16.x",
              "Timeout": 180,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleCustomResourcesLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "IamRoleCustomResourcesLambdaExecution"
            ]
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-crud-serverless-users",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceUsers": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "users",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUsersIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUsers"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSignedurl": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "signedUrl",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUsersIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.path.id": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsersIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetDashusersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayCrudserverlessusersRequestValidator"
              }
            },
            "DependsOn": [
              "GetDashusersLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUsersPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateDashusersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayCrudserverlessusersRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodUsersPostApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "CreateDashusersLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUsersIdVarPatch": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PATCH",
              "RequestParameters": {
                "method.request.path.id": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsersIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateDashusersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayCrudserverlessusersRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodUsersIdVarPatchApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "UpdateDashusersLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUsersIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {
                "method.request.path.id": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsersIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteDashusersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayCrudserverlessusersRequestValidator"
              }
            },
            "DependsOn": [
              "DeleteDashusersLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSignedurlGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.querystring.filename": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceSignedurl"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SignedUrlLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayCrudserverlessusersRequestValidator"
              }
            },
            "DependsOn": [
              "SignedUrlLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayCrudserverlessusersRequestValidator": {
            "Type": "AWS::ApiGateway::RequestValidator",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ValidateRequestBody": true,
              "ValidateRequestParameters": true,
              "Name": "crud-serverless-users-dev | Validate request body and querystring parameters"
            }
          },
          "ApiGatewayMethodUsersPostApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ContentType": "application/json",
              "Schema": {
                "$schema": "https://json-schema.org/draft-04/schema#",
                "title": "User",
                "type": "object",
                "required": [
                  "name",
                  "age"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The person's first name."
                  },
                  "age": {
                    "description": "Age in years which must be equal to or greater than zero.",
                    "type": "integer",
                    "minimum": 18
                  }
                }
              }
            }
          },
          "ApiGatewayMethodUsersIdVarPatchApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ContentType": "application/json",
              "Schema": {
                "$schema": "https://json-schema.org/draft-04/schema#",
                "title": "User",
                "type": "object",
                "required": [
                  "name",
                  "age"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The person's first name."
                  },
                  "age": {
                    "description": "Age in years which must be equal to or greater than zero.",
                    "type": "integer",
                    "minimum": 18
                  }
                }
              }
            }
          },
          "ApiGatewayDeployment1706816527750": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodUsersIdVarGet",
              "ApiGatewayMethodUsersPost",
              "ApiGatewayMethodUsersIdVarPatch",
              "ApiGatewayMethodUsersIdVarDelete",
              "ApiGatewayMethodSignedurlGet"
            ]
          },
          "GetDashusersLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetDashusersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateDashusersLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateDashusersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateDashusersLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateDashusersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteDashusersLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteDashusersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SignedUrlLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SignedUrlLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "usersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "usersTable",
              "AttributeDefinitions": [
                {
                  "AttributeName": "pk",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "pk",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              }
            }
          },
          "S3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "PublicAccessBlockConfiguration": {
                "BlockPublicAcls": false,
                "BlockPublicPolicy": false
              },
              "BucketName": "bucket-serverless-course"
            }
          },
          "SampleBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "S3Bucket"
              },
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Action": [
                      "s3:GetObject"
                    ],
                    "Effect": "Allow",
                    "Resource": {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "S3Bucket"
                          },
                          "/*"
                        ]
                      ]
                    },
                    "Principal": "*"
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-crud-serverless-users-dev-ServerlessDeploymentBucketName"
            }
          },
          "BaseLambdaLayerQualifiedArn": {
            "Description": "Current Lambda layer version",
            "Value": {
              "Ref": "BaseLambdaLayer"
            },
            "Export": {
              "Name": "sls-crud-serverless-users-dev-BaseLambdaLayerQualifiedArn"
            }
          },
          "BaseLambdaLayerHash": {
            "Description": "Current Lambda layer hash",
            "Value": "02a53767c941a221d3adae798a4c59d80c2b52a1",
            "Export": {
              "Name": "sls-crud-serverless-users-dev-BaseLambdaLayerHash"
            }
          },
          "BaseLambdaLayerS3Key": {
            "Description": "Current Lambda layer S3Key",
            "Value": "serverless/crud-serverless-users/dev/1706816528815-2024-02-01T19:42:08.815Z/nodejs.zip",
            "Export": {
              "Name": "sls-crud-serverless-users-dev-BaseLambdaLayerS3Key"
            }
          },
          "GetDashusersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetDashusersLambdaVersionQjzCQ5PZosMB4iaBNUhLYyME08MqLh2HoWrdocSEg"
            },
            "Export": {
              "Name": "sls-crud-serverless-users-dev-GetDashusersLambdaFunctionQualifiedArn"
            }
          },
          "CreateDashusersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateDashusersLambdaVersionO6WpxkhrpOhTHoz9XvGNzlhbYVGX1LhDtV2CnOi0Q"
            },
            "Export": {
              "Name": "sls-crud-serverless-users-dev-CreateDashusersLambdaFunctionQualifiedArn"
            }
          },
          "UpdateDashusersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateDashusersLambdaVersiongbCKgCjvLKWhriqwyPPMWFgn8cuFbeITbDFl6Moc"
            },
            "Export": {
              "Name": "sls-crud-serverless-users-dev-UpdateDashusersLambdaFunctionQualifiedArn"
            }
          },
          "DeleteDashusersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteDashusersLambdaVersionJtPiwxrMSj1x1dV0cfXdDfv0uIg5j06F2zg2yxXBE"
            },
            "Export": {
              "Name": "sls-crud-serverless-users-dev-DeleteDashusersLambdaFunctionQualifiedArn"
            }
          },
          "SignedUrlLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SignedUrlLambdaVersionkqkvEnXKbGEj4dhHg0wIxatmlFghENTx0nDrEto1bLM"
            },
            "Export": {
              "Name": "sls-crud-serverless-users-dev-SignedUrlLambdaFunctionQualifiedArn"
            }
          },
          "ThumbGeneratorLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ThumbGeneratorLambdaVersion1gTeNwaLXSJcyvXhpEggnbHsBAy275Prm0WQPH8gYM"
            },
            "Export": {
              "Name": "sls-crud-serverless-users-dev-ThumbGeneratorLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-crud-serverless-users-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "dynamodb": {
        "stages": [
          "dev"
        ],
        "start": {
          "port": 8000,
          "inMemory": true,
          "migrate": true
        }
      }
    },
    "pluginsData": {},
    "functions": {
      "get-users": {
        "handler": "getUsers/handler.getUsers",
        "package": {
          "patterns": [
            "getUsers/handler.js"
          ],
          "artifact": "/Users/fpanchi/Documents/Cursos/serverless/.serverless/get-users.zip"
        },
        "events": [
          {
            "http": {
              "path": "users/{id}",
              "method": "get",
              "request": {
                "parameters": {
                  "method.request.path.id": true
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "crud-serverless-users-dev-get-users",
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetDashusersLambdaVersionQjzCQ5PZosMB4iaBNUhLYyME08MqLh2HoWrdocSEg"
      },
      "create-users": {
        "handler": "createUsers/handler.createUsers",
        "package": {
          "patterns": [
            "createUsers/handler.js"
          ],
          "artifact": "/Users/fpanchi/Documents/Cursos/serverless/.serverless/create-users.zip"
        },
        "events": [
          {
            "http": {
              "path": "users",
              "method": "post",
              "request": {
                "schemas": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodUsersPostApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "crud-serverless-users-dev-create-users",
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CreateDashusersLambdaVersionO6WpxkhrpOhTHoz9XvGNzlhbYVGX1LhDtV2CnOi0Q"
      },
      "update-users": {
        "handler": "updateUsers/handler.updateUsers",
        "package": {
          "patterns": [
            "updateUsers/handler.js"
          ],
          "artifact": "/Users/fpanchi/Documents/Cursos/serverless/.serverless/update-users.zip"
        },
        "events": [
          {
            "http": {
              "path": "users/{id}",
              "method": "patch",
              "request": {
                "parameters": {
                  "method.request.path.id": true
                },
                "schemas": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodUsersIdVarPatchApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "crud-serverless-users-dev-update-users",
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "UpdateDashusersLambdaVersiongbCKgCjvLKWhriqwyPPMWFgn8cuFbeITbDFl6Moc"
      },
      "delete-users": {
        "handler": "deleteUsers/handler.deleteUsers",
        "runtime": "python3.8",
        "package": {
          "patterns": [
            "deleteUsers/handler.py"
          ],
          "artifact": "/Users/fpanchi/Documents/Cursos/serverless/.serverless/delete-users.zip"
        },
        "events": [
          {
            "http": {
              "path": "users/{id}",
              "method": "delete",
              "request": {
                "parameters": {
                  "method.request.path.id": true
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "crud-serverless-users-dev-delete-users",
        "memory": 1024,
        "timeout": 6,
        "vpc": {},
        "versionLogicalId": "DeleteDashusersLambdaVersionJtPiwxrMSj1x1dV0cfXdDfv0uIg5j06F2zg2yxXBE"
      },
      "signedUrl": {
        "handler": "signedUrl/handler.signedS3Url",
        "package": {
          "patterns": [
            "signedUrl/handler.js"
          ],
          "artifact": "/Users/fpanchi/Documents/Cursos/serverless/.serverless/signedUrl.zip"
        },
        "events": [
          {
            "http": {
              "path": "signedUrl",
              "method": "get",
              "request": {
                "parameters": {
                  "method.request.querystring.filename": true
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "crud-serverless-users-dev-signedUrl",
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "SignedUrlLambdaVersionkqkvEnXKbGEj4dhHg0wIxatmlFghENTx0nDrEto1bLM"
      },
      "thumbGenerator": {
        "handler": "thumbnail/handler.thumbnailGenerator",
        "layers": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ThumbGeneratorLambdaFunction\"][\"Properties\"][\"Layers\"]"
        },
        "package": {
          "patterns": [
            "thumbnail/handler.js"
          ],
          "artifact": "/Users/fpanchi/Documents/Cursos/serverless/.serverless/thumbGenerator.zip"
        },
        "events": [
          {
            "s3": {
              "bucket": "bucket-serverless-course",
              "event": "s3:ObjectCreated:*",
              "existing": true,
              "rules": [
                {
                  "prefix": "upload/"
                }
              ]
            }
          }
        ],
        "name": "crud-serverless-users-dev-thumbGenerator",
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "ThumbGeneratorLambdaVersion1gTeNwaLXSJcyvXhpEggnbHsBAy275Prm0WQPH8gYM"
      }
    },
    "resources": {
      "Resources": {
        "usersTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "usersTable",
            "AttributeDefinitions": [
              {
                "AttributeName": "pk",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "pk",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            }
          }
        },
        "S3Bucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "PublicAccessBlockConfiguration": {
              "BlockPublicAcls": false,
              "BlockPublicPolicy": false
            },
            "BucketName": "bucket-serverless-course"
          }
        },
        "SampleBucketPolicy": {
          "Type": "AWS::S3::BucketPolicy",
          "Properties": {
            "Bucket": {
              "Ref": "S3Bucket"
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "S3Bucket"
                        },
                        "/*"
                      ]
                    ]
                  },
                  "Principal": "*"
                }
              ]
            }
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "crud-serverless-users",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "package": {
        "individually": true,
        "patterns": [
          "!*/**"
        ],
        "exclude": [
          "./**"
        ],
        "artifactsS3KeyDirname": "serverless/crud-serverless-users/dev/code-artifacts",
        "artifactDirectoryName": "serverless/crud-serverless-users/dev/1706816528815-2024-02-01T19:42:08.815Z"
      },
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "layers": {
        "base": {
          "name": "prod-dependencies",
          "compatibleRuntimes": {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"BaseLambdaLayer\"][\"Properties\"][\"CompatibleRuntimes\"]"
          },
          "package": {
            "artifact": "nodejs.zip"
          }
        }
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {
      "$ref": "$[\"service\"][\"initialServerlessConfig\"][\"layers\"]"
    },
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/crud-serverless-users/dev/1706816528815-2024-02-01T19:42:08.815Z",
    "artifact": ""
  }
}