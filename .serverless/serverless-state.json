{
  "service": {
    "service": "crud-serverless-users",
    "serviceObject": {
      "name": "crud-serverless-users"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs20.x",
      "apiGateway": {
        "apiKeys": [
          "crud-serverless-user-apikey"
        ]
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:*"
              ],
              "Resource": "arn:aws:dynamodb:us-east-1:527802614022:table/usersTable"
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:*"
              ],
              "Resource": "arn:aws:s3:::bucket-serverless-course/*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "sqs:SendMessage",
                "sqs:ChangeMessageVisibility"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "sqsqueueQueue2D4D9CB5",
                    "Arn"
                  ]
                }
              ]
            }
          ]
        }
      },
      "environment": {
        "BUCKET": "bucket-serverless-course",
        "SECRET_EGG": "LmNvbs9YXN0Z"
      },
      "stage": "dev",
      "region": "us-east-1",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "CustomDashauthorizerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/crud-serverless-users-dev-custom-authorizer"
            }
          },
          "GetDashusersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/crud-serverless-users-dev-get-users"
            }
          },
          "CreateDashusersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/crud-serverless-users-dev-create-users"
            }
          },
          "UpdateDashusersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/crud-serverless-users-dev-update-users"
            }
          },
          "DeleteDashusersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/crud-serverless-users-dev-delete-users"
            }
          },
          "SignedUrlLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/crud-serverless-users-dev-signedUrl"
            }
          },
          "ThumbGeneratorLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/crud-serverless-users-dev-thumbGenerator"
            }
          },
          "SqsDashqueueWorkerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/crud-serverless-users-dev-sqs-queueWorker"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "crud-serverless-users",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/crud-serverless-users-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/crud-serverless-users-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][1]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][2]"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sqs:ReceiveMessage",
                          "sqs:DeleteMessage",
                          "sqs:GetQueueAttributes"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "sqsqueueQueue2D4D9CB5",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "crud-serverless-users",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "BaseLambdaLayer": {
            "Type": "AWS::Lambda::LayerVersion",
            "Properties": {
              "Content": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/crud-serverless-users/dev/1708532888217-2024-02-21T16:28:08.217Z/nodejs.zip"
              },
              "LayerName": "prod-dependencies",
              "CompatibleRuntimes": [
                "nodejs20.x"
              ]
            }
          },
          "CustomDashauthorizerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/crud-serverless-users/dev/1708534146554-2024-02-21T16:49:06.554Z/custom-authorizer.zip"
              },
              "Handler": "authorizer/handler.authorize",
              "Runtime": "nodejs20.x",
              "FunctionName": "crud-serverless-users-dev-custom-authorizer",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "BUCKET": "bucket-serverless-course",
                  "SECRET_EGG": "LmNvbs9YXN0Z"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CustomDashauthorizerLogGroup"
            ]
          },
          "GetDashusersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/crud-serverless-users/dev/1708534146554-2024-02-21T16:49:06.554Z/get-users.zip"
              },
              "Handler": "getUsers/handler.getUsers",
              "Runtime": "nodejs20.x",
              "FunctionName": "crud-serverless-users-dev-get-users",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "BUCKET": "bucket-serverless-course",
                  "SECRET_EGG": "LmNvbs9YXN0Z"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Layers": [
                {
                  "Ref": "BaseLambdaLayer"
                }
              ]
            },
            "DependsOn": [
              "GetDashusersLogGroup"
            ]
          },
          "CreateDashusersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/crud-serverless-users/dev/1708534146554-2024-02-21T16:49:06.554Z/create-users.zip"
              },
              "Handler": "createUsers/handler.createUsers",
              "Runtime": "nodejs20.x",
              "FunctionName": "crud-serverless-users-dev-create-users",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "BUCKET": "bucket-serverless-course",
                  "SECRET_EGG": "LmNvbs9YXN0Z"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Layers": [
                {
                  "Ref": "BaseLambdaLayer"
                }
              ]
            },
            "DependsOn": [
              "CreateDashusersLogGroup"
            ]
          },
          "UpdateDashusersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/crud-serverless-users/dev/1708534146554-2024-02-21T16:49:06.554Z/update-users.zip"
              },
              "Handler": "updateUsers/handler.updateUsers",
              "Runtime": "nodejs20.x",
              "FunctionName": "crud-serverless-users-dev-update-users",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "BUCKET": "bucket-serverless-course",
                  "SECRET_EGG": "LmNvbs9YXN0Z"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "UpdateDashusersLogGroup"
            ]
          },
          "DeleteDashusersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/crud-serverless-users/dev/1708534146554-2024-02-21T16:49:06.554Z/delete-users.zip"
              },
              "Handler": "deleteUsers/handler.deleteUsers",
              "Runtime": "python3.8",
              "FunctionName": "crud-serverless-users-dev-delete-users",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "BUCKET": "bucket-serverless-course",
                  "SECRET_EGG": "LmNvbs9YXN0Z"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "DeleteDashusersLogGroup"
            ]
          },
          "SignedUrlLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/crud-serverless-users/dev/1708534146554-2024-02-21T16:49:06.554Z/signedUrl.zip"
              },
              "Handler": "signedUrl/handler.signedS3Url",
              "Runtime": "nodejs20.x",
              "FunctionName": "crud-serverless-users-dev-signedUrl",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "BUCKET": "bucket-serverless-course",
                  "SECRET_EGG": "LmNvbs9YXN0Z"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "SignedUrlLogGroup"
            ]
          },
          "ThumbGeneratorLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/crud-serverless-users/dev/1708534146554-2024-02-21T16:49:06.554Z/thumbGenerator.zip"
              },
              "Handler": "thumbnail/handler.thumbnailGenerator",
              "Runtime": "nodejs20.x",
              "FunctionName": "crud-serverless-users-dev-thumbGenerator",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "BUCKET": "bucket-serverless-course",
                  "SECRET_EGG": "LmNvbs9YXN0Z"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Layers": [
                {
                  "Ref": "BaseLambdaLayer"
                }
              ]
            },
            "DependsOn": [
              "ThumbGeneratorLogGroup"
            ]
          },
          "SqsDashqueueWorkerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/crud-serverless-users/dev/1708534146554-2024-02-21T16:49:06.554Z/sqs-queueWorker.zip"
              },
              "Handler": "likeuser/handler.likeUser",
              "Runtime": "nodejs20.x",
              "FunctionName": "crud-serverless-users-dev-sqs-queueWorker",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "BUCKET": "bucket-serverless-course",
                  "SECRET_EGG": "LmNvbs9YXN0Z"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "Layers": [
                {
                  "Ref": "BaseLambdaLayer"
                }
              ]
            },
            "DependsOn": [
              "SqsDashqueueWorkerLogGroup"
            ]
          },
          "CustomDashauthorizerLambdaVersion8DHdYO34nQHZFdg2AvbkgHr9PSo4bPHKClFaqLX0Pk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CustomDashauthorizerLambdaFunction"
              },
              "CodeSha256": "ok8zQZ1hR0tbSKNoxpgZM7LNna2Sj3MBfc1Z4VNjMCc="
            }
          },
          "DeleteDashusersLambdaVersionmknDxT9tgKwgnt10GsUXzMME9tTytOwv2mImhvbPfY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteDashusersLambdaFunction"
              },
              "CodeSha256": "NG5n5cGrJH01F7siu5F0/7loQBH+vUesawA4vi+AEv0="
            }
          },
          "SignedUrlLambdaVersionwRxBa519Je8NcXTa88ICnmQgyRLHxcasORb2CmbV0U": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SignedUrlLambdaFunction"
              },
              "CodeSha256": "aII/0OqdgVytUxjT3o8x+rfvAfcKbuKamdjkGSMSdUY="
            }
          },
          "UpdateDashusersLambdaVersionqxDrkIWBo21hmecr3NfNK3oeo9oHEWzpMG7zxJgnQ": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "UpdateDashusersLambdaFunction"
              },
              "CodeSha256": "O8sFnNnCZSuAufWY5D7itl11BGSWls7Kzk5ilA49kpo="
            }
          },
          "GetDashusersLambdaVersionHmgksS7EAcqzsqwqeuKbYh66RmeiTZYQmPo11Y": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetDashusersLambdaFunction"
              },
              "CodeSha256": "/KTJYAiuHqexAZANni0DGX31HIWznsoesispfEoi/WU="
            }
          },
          "CreateDashusersLambdaVersioniFSdzpKigCYf1cBsVRCx07lBCPblkahtVacoyhqJeEs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateDashusersLambdaFunction"
              },
              "CodeSha256": "pKF7ECAsRGj0WOyef4mWMdm/lRsDIDqPn+rgS8r0MqU="
            }
          },
          "ThumbGeneratorLambdaVersion4JIXqkmyTh2CHuG5rCTBw5ic01kSqWqbxotvd3hA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ThumbGeneratorLambdaFunction"
              },
              "CodeSha256": "K6NBsaaz0GkZNqIUo93ucFtgVXSWbruIBaY2gm8NFME="
            }
          },
          "SqsDashqueueWorkerLambdaVersion9xwAE9kw4z1dOYUjz974D2GpE0D8CT1TJO6iOahrI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SqsDashqueueWorkerLambdaFunction"
              },
              "CodeSha256": "H3vpNHSSczNx58HW8ahS8mjLu2v6CisEVMjs5+hnktE="
            }
          },
          "ThumbGeneratorCustomS31": {
            "Type": "Custom::S3",
            "Version": 1,
            "DependsOn": [
              "ThumbGeneratorLambdaFunction",
              "CustomDashresourceDashexistingDashs3LambdaFunction"
            ],
            "Properties": {
              "ServiceToken": {
                "Fn::GetAtt": [
                  "CustomDashresourceDashexistingDashs3LambdaFunction",
                  "Arn"
                ]
              },
              "FunctionName": "crud-serverless-users-dev-thumbGenerator",
              "BucketName": "bucket-serverless-course",
              "BucketConfigs": [
                {
                  "Event": "s3:ObjectCreated:*",
                  "Rules": [
                    {
                      "Prefix": "upload/"
                    }
                  ]
                }
              ]
            }
          },
          "IamRoleCustomResourcesLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "dev",
                        "crud-serverless-users",
                        "custom-resources-lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "s3",
                              "",
                              "",
                              "bucket-serverless-course"
                            ]
                          ]
                        },
                        "Action": [
                          "s3:PutBucketNotification",
                          "s3:GetBucketNotification"
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Resource": {
                          "Fn::Join": [
                            ":",
                            [
                              "arn",
                              {
                                "Ref": "AWS::Partition"
                              },
                              "lambda",
                              {
                                "Ref": "AWS::Region"
                              },
                              {
                                "Ref": "AWS::AccountId"
                              },
                              "function",
                              "*"
                            ]
                          ]
                        },
                        "Action": [
                          "lambda:AddPermission",
                          "lambda:RemovePermission"
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "CustomDashresourceDashexistingDashs3LambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/crud-serverless-users/dev/1708534146554-2024-02-21T16:49:06.554Z/custom-resources.zip"
              },
              "FunctionName": "crud-serverless-users-dev-custom-resource-existing-s3",
              "Handler": "s3/handler.handler",
              "MemorySize": 1024,
              "Runtime": "nodejs16.x",
              "Timeout": 180,
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleCustomResourcesLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "IamRoleCustomResourcesLambdaExecution"
            ]
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-crud-serverless-users",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceUsers": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "users",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUsersIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUsers"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceSignedurl": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "signedUrl",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUsersIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.path.id": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsersIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetDashusersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayCrudserverlessusersRequestValidator"
              }
            },
            "DependsOn": [
              "GetDashusersLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUsersPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateDashusersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayCrudserverlessusersRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodUsersPostApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "CreateDashusersLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUsersIdVarPatch": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PATCH",
              "RequestParameters": {
                "method.request.path.id": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsersIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "UpdateDashusersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayCrudserverlessusersRequestValidator"
              },
              "RequestModels": {
                "application/json": {
                  "Ref": "ApiGatewayMethodUsersIdVarPatchApplicationJsonModel"
                }
              }
            },
            "DependsOn": [
              "UpdateDashusersLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUsersIdVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {
                "method.request.path.id": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsersIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteDashusersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayCrudserverlessusersRequestValidator"
              }
            },
            "DependsOn": [
              "DeleteDashusersLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodSignedurlGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.querystring.filename": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceSignedurl"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SignedUrlLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayCrudserverlessusersRequestValidator"
              }
            },
            "DependsOn": [
              "SignedUrlLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayCrudserverlessusersRequestValidator": {
            "Type": "AWS::ApiGateway::RequestValidator",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ValidateRequestBody": true,
              "ValidateRequestParameters": true,
              "Name": "crud-serverless-users-dev | Validate request body and querystring parameters"
            }
          },
          "ApiGatewayMethodUsersPostApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ContentType": "application/json",
              "Schema": {
                "$schema": "https://json-schema.org/draft-04/schema#",
                "title": "User",
                "type": "object",
                "required": [
                  "name",
                  "age"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The person's first name."
                  },
                  "age": {
                    "description": "Age in years which must be equal to or greater than zero.",
                    "type": "integer",
                    "minimum": 18
                  }
                }
              }
            }
          },
          "ApiGatewayMethodUsersIdVarPatchApplicationJsonModel": {
            "Type": "AWS::ApiGateway::Model",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ContentType": "application/json",
              "Schema": {
                "$schema": "https://json-schema.org/draft-04/schema#",
                "title": "User",
                "type": "object",
                "required": [
                  "name",
                  "age"
                ],
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The person's first name."
                  },
                  "age": {
                    "description": "Age in years which must be equal to or greater than zero.",
                    "type": "integer",
                    "minimum": 18
                  }
                }
              }
            }
          },
          "ApiGatewayDeployment1708534144452": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodUsersIdVarGet",
              "ApiGatewayMethodUsersPost",
              "ApiGatewayMethodUsersIdVarPatch",
              "ApiGatewayMethodUsersIdVarDelete",
              "ApiGatewayMethodSignedurlGet",
              "ApiGatewayMethodLikeuserOptions",
              "ApiGatewayMethodLikeuserPost"
            ]
          },
          "ApiGatewayApiKey1": {
            "Type": "AWS::ApiGateway::ApiKey",
            "Properties": {
              "Enabled": true,
              "Name": "crud-serverless-user-apikey",
              "StageKeys": [
                {
                  "RestApiId": {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "StageName": "dev"
                }
              ]
            },
            "DependsOn": "ApiGatewayDeployment1708534144452"
          },
          "ApiGatewayUsagePlan": {
            "Type": "AWS::ApiGateway::UsagePlan",
            "DependsOn": "ApiGatewayDeployment1708534144452",
            "Properties": {
              "ApiStages": [
                {
                  "ApiId": {
                    "Ref": "ApiGatewayRestApi"
                  },
                  "Stage": "dev"
                }
              ],
              "Description": "Usage plan for crud-serverless-users dev stage",
              "UsagePlanName": "crud-serverless-users-dev"
            }
          },
          "ApiGatewayUsagePlanKey1": {
            "Type": "AWS::ApiGateway::UsagePlanKey",
            "Properties": {
              "KeyId": {
                "Ref": "ApiGatewayApiKey1"
              },
              "KeyType": "API_KEY",
              "UsagePlanId": {
                "Ref": "ApiGatewayUsagePlan"
              }
            }
          },
          "GetDashusersLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetDashusersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateDashusersLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateDashusersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "UpdateDashusersLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "UpdateDashusersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteDashusersLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteDashusersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SignedUrlLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SignedUrlLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SqsDashqueueWorkerEventSourceMappingSQSSqsqueueQueue2D4D9CB5": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "IamRoleLambdaExecution"
            ],
            "Properties": {
              "BatchSize": 1,
              "MaximumBatchingWindowInSeconds": 0,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "sqsqueueQueue2D4D9CB5",
                  "Arn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "SqsDashqueueWorkerLambdaFunction",
                  "Arn"
                ]
              },
              "Enabled": true,
              "FunctionResponseTypes": [
                "ReportBatchItemFailures"
              ]
            }
          },
          "ApiGatewayResourceLikeuser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "likeuser",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodLikeuserOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": "#set($origin = $input.params(\"Origin\"))\n#if($origin == \"\") #set($origin = $input.params(\"origin\")) #end\n#if($origin.matches(\".+\")) #set($context.responseOverride.header.Access-Control-Allow-Origin = $origin) #end"
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceLikeuser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApigatewayToSqsRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": "apigateway.amazonaws.com"
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": "apigatewaytosqs",
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream",
                          "logs:PutLogEvents"
                        ],
                        "Resource": "*"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sqs:SendMessage"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": [
                              "arn:${AWS::Partition}:sqs:${AWS::Region}:${AWS::AccountId}:${queueName}",
                              {
                                "queueName": "likequeue"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ]
            }
          },
          "ApiGatewayMethodLikeuserPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "AuthorizationType": "NONE",
              "ApiKeyRequired": false,
              "ResourceId": {
                "Ref": "ApiGatewayResourceLikeuser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS",
                "Credentials": {
                  "Fn::GetAtt": [
                    "ApigatewayToSqsRole",
                    "Arn"
                  ]
                },
                "Uri": {
                  "Fn::Sub": [
                    "arn:${AWS::Partition}:apigateway:${AWS::Region}:sqs:path//${AWS::AccountId}/${queueName}",
                    {
                      "queueName": "likequeue"
                    }
                  ]
                },
                "RequestParameters": {
                  "integration.request.querystring.Action": "'SendMessage'",
                  "integration.request.querystring.MessageBody": "method.request.body"
                },
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "IntegrationResponses": [
                  {
                    "StatusCode": 200,
                    "SelectionPattern": 200,
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {
                      "application/json": "{ \"message\": \"accepted\" }"
                    }
                  },
                  {
                    "StatusCode": 400,
                    "SelectionPattern": 400,
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {
                      "application/json": "{ \"message\": \"there is an error in your request\" }"
                    }
                  },
                  {
                    "StatusCode": 500,
                    "SelectionPattern": 500,
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'"
                    },
                    "ResponseTemplates": {
                      "application/json": "{ \"message\": \"there was an error handling your request\" }"
                    }
                  }
                ]
              },
              "MethodResponses": [
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                  },
                  "ResponseModels": {},
                  "StatusCode": 200
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                  },
                  "ResponseModels": {},
                  "StatusCode": 400
                },
                {
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": "'*'"
                  },
                  "ResponseModels": {},
                  "StatusCode": 500
                }
              ]
            }
          },
          "usersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "usersTable",
              "AttributeDefinitions": [
                {
                  "AttributeName": "pk",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "pk",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              }
            }
          },
          "S3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "PublicAccessBlockConfiguration": {
                "BlockPublicAcls": false,
                "BlockPublicPolicy": false
              },
              "BucketName": "bucket-serverless-course"
            }
          },
          "SampleBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "S3Bucket"
              },
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Action": [
                      "s3:GetObject"
                    ],
                    "Effect": "Allow",
                    "Resource": {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "S3Bucket"
                          },
                          "/*"
                        ]
                      ]
                    },
                    "Principal": "*"
                  }
                ]
              }
            }
          },
          "sqsqueueDlq73C8BFDF": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "MessageRetentionPeriod": 1209600,
              "QueueName": "crud-serverless-users-dev-sqs-queue-dlq"
            },
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete"
          },
          "sqsqueueQueue2D4D9CB5": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "likequeue",
              "RedrivePolicy": {
                "deadLetterTargetArn": {
                  "Fn::GetAtt": [
                    "sqsqueueDlq73C8BFDF",
                    "Arn"
                  ]
                },
                "maxReceiveCount": 3
              },
              "VisibilityTimeout": 36
            },
            "UpdateReplacePolicy": "Delete",
            "DeletionPolicy": "Delete"
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-crud-serverless-users-dev-ServerlessDeploymentBucketName"
            }
          },
          "BaseLambdaLayerQualifiedArn": {
            "Description": "Current Lambda layer version",
            "Value": {
              "Ref": "BaseLambdaLayer"
            },
            "Export": {
              "Name": "sls-crud-serverless-users-dev-BaseLambdaLayerQualifiedArn"
            }
          },
          "BaseLambdaLayerHash": {
            "Description": "Current Lambda layer hash",
            "Value": "4496a6e24cdb22d02b50068f64caa15ded6aff8e",
            "Export": {
              "Name": "sls-crud-serverless-users-dev-BaseLambdaLayerHash"
            }
          },
          "BaseLambdaLayerS3Key": {
            "Description": "Current Lambda layer S3Key",
            "Value": "serverless/crud-serverless-users/dev/1708532888217-2024-02-21T16:28:08.217Z/nodejs.zip",
            "Export": {
              "Name": "sls-crud-serverless-users-dev-BaseLambdaLayerS3Key"
            }
          },
          "CustomDashauthorizerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CustomDashauthorizerLambdaVersion8DHdYO34nQHZFdg2AvbkgHr9PSo4bPHKClFaqLX0Pk"
            },
            "Export": {
              "Name": "sls-crud-serverless-users-dev-CustomDashauthorizerLambdaFunctionQualifiedArn"
            }
          },
          "DeleteDashusersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteDashusersLambdaVersionmknDxT9tgKwgnt10GsUXzMME9tTytOwv2mImhvbPfY"
            },
            "Export": {
              "Name": "sls-crud-serverless-users-dev-DeleteDashusersLambdaFunctionQualifiedArn"
            }
          },
          "SignedUrlLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SignedUrlLambdaVersionwRxBa519Je8NcXTa88ICnmQgyRLHxcasORb2CmbV0U"
            },
            "Export": {
              "Name": "sls-crud-serverless-users-dev-SignedUrlLambdaFunctionQualifiedArn"
            }
          },
          "UpdateDashusersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "UpdateDashusersLambdaVersionqxDrkIWBo21hmecr3NfNK3oeo9oHEWzpMG7zxJgnQ"
            },
            "Export": {
              "Name": "sls-crud-serverless-users-dev-UpdateDashusersLambdaFunctionQualifiedArn"
            }
          },
          "GetDashusersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetDashusersLambdaVersionHmgksS7EAcqzsqwqeuKbYh66RmeiTZYQmPo11Y"
            },
            "Export": {
              "Name": "sls-crud-serverless-users-dev-GetDashusersLambdaFunctionQualifiedArn"
            }
          },
          "CreateDashusersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateDashusersLambdaVersioniFSdzpKigCYf1cBsVRCx07lBCPblkahtVacoyhqJeEs"
            },
            "Export": {
              "Name": "sls-crud-serverless-users-dev-CreateDashusersLambdaFunctionQualifiedArn"
            }
          },
          "ThumbGeneratorLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ThumbGeneratorLambdaVersion4JIXqkmyTh2CHuG5rCTBw5ic01kSqWqbxotvd3hA"
            },
            "Export": {
              "Name": "sls-crud-serverless-users-dev-ThumbGeneratorLambdaFunctionQualifiedArn"
            }
          },
          "SqsDashqueueWorkerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SqsDashqueueWorkerLambdaVersion9xwAE9kw4z1dOYUjz974D2GpE0D8CT1TJO6iOahrI"
            },
            "Export": {
              "Name": "sls-crud-serverless-users-dev-SqsDashqueueWorkerLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-crud-serverless-users-dev-ServiceEndpoint"
            }
          },
          "sqsqueueQueueArnE88B4375": {
            "Description": "ARN of the \"sqs-queue\" SQS queue.",
            "Value": {
              "Fn::GetAtt": [
                "sqsqueueQueue2D4D9CB5",
                "Arn"
              ]
            }
          },
          "sqsqueueQueueUrl3809BBF1": {
            "Description": "URL of the \"sqs-queue\" SQS queue.",
            "Value": {
              "Ref": "sqsqueueQueue2D4D9CB5"
            }
          },
          "sqsqueueDlqUrl1FF18D38": {
            "Description": "URL of the \"sqs-queue\" SQS dead letter queue.",
            "Value": {
              "Ref": "sqsqueueDlq73C8BFDF"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "custom": {
      "dynamodb": {
        "stages": [
          "dev"
        ],
        "start": {
          "port": 8000,
          "inMemory": true,
          "migrate": true
        }
      },
      "apiGatewayServiceProxies": [
        {
          "sqs": {
            "path": "likeuser",
            "method": "post",
            "queueName": "likequeue",
            "cors": {
              "origins": [
                "*"
              ],
              "origin": "*",
              "methods": [
                "OPTIONS",
                "POST"
              ],
              "headers": [
                "Content-Type",
                "X-Amz-Date",
                "Authorization",
                "X-Api-Key",
                "X-Amz-Security-Token",
                "X-Amz-User-Agent"
              ],
              "allowCredentials": false
            },
            "response": {
              "template": {
                "success": "{ \"message\": \"accepted\" }",
                "clientError": "{ \"message\": \"there is an error in your request\" }",
                "serverError": "{ \"message\": \"there was an error handling your request\" }"
              }
            },
            "auth": {
              "authorizationType": "NONE"
            }
          }
        }
      ]
    },
    "plugins": [
      "serverless-apigateway-service-proxy",
      "serverless-lift"
    ],
    "pluginsData": {},
    "functions": {
      "custom-authorizer": {
        "handler": "authorizer/handler.authorize",
        "package": {
          "patterns": [
            "authorizer/handler.js"
          ],
          "artifact": "/Users/fpanchi/Documents/Cursos/serverless/.serverless/custom-authorizer.zip"
        },
        "events": [],
        "name": "crud-serverless-users-dev-custom-authorizer",
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "CustomDashauthorizerLambdaVersion8DHdYO34nQHZFdg2AvbkgHr9PSo4bPHKClFaqLX0Pk"
      },
      "get-users": {
        "handler": "getUsers/handler.getUsers",
        "layers": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetDashusersLambdaFunction\"][\"Properties\"][\"Layers\"]"
        },
        "package": {
          "patterns": [
            "getUsers/handler.js"
          ],
          "artifact": "/Users/fpanchi/Documents/Cursos/serverless/.serverless/get-users.zip"
        },
        "events": [
          {
            "http": {
              "path": "users/{id}",
              "method": "get",
              "request": {
                "parameters": {
                  "method.request.path.id": true
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "crud-serverless-users-dev-get-users",
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "GetDashusersLambdaVersionHmgksS7EAcqzsqwqeuKbYh66RmeiTZYQmPo11Y"
      },
      "create-users": {
        "handler": "createUsers/handler.createUsers",
        "layers": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateDashusersLambdaFunction\"][\"Properties\"][\"Layers\"]"
        },
        "package": {
          "patterns": [
            "createUsers/handler.js"
          ],
          "artifact": "/Users/fpanchi/Documents/Cursos/serverless/.serverless/create-users.zip"
        },
        "events": [
          {
            "http": {
              "path": "users",
              "method": "post",
              "request": {
                "schemas": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodUsersPostApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "crud-serverless-users-dev-create-users",
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "CreateDashusersLambdaVersioniFSdzpKigCYf1cBsVRCx07lBCPblkahtVacoyhqJeEs"
      },
      "update-users": {
        "handler": "updateUsers/handler.updateUsers",
        "package": {
          "patterns": [
            "updateUsers/handler.js"
          ],
          "artifact": "/Users/fpanchi/Documents/Cursos/serverless/.serverless/update-users.zip"
        },
        "events": [
          {
            "http": {
              "path": "users/{id}",
              "method": "patch",
              "request": {
                "parameters": {
                  "method.request.path.id": true
                },
                "schemas": {
                  "application/json": {
                    "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ApiGatewayMethodUsersIdVarPatchApplicationJsonModel\"][\"Properties\"][\"Schema\"]"
                  }
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "crud-serverless-users-dev-update-users",
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "UpdateDashusersLambdaVersionqxDrkIWBo21hmecr3NfNK3oeo9oHEWzpMG7zxJgnQ"
      },
      "delete-users": {
        "handler": "deleteUsers/handler.deleteUsers",
        "runtime": "python3.8",
        "package": {
          "patterns": [
            "deleteUsers/handler.py"
          ],
          "artifact": "/Users/fpanchi/Documents/Cursos/serverless/.serverless/delete-users.zip"
        },
        "events": [
          {
            "http": {
              "path": "users/{id}",
              "method": "delete",
              "request": {
                "parameters": {
                  "method.request.path.id": true
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "crud-serverless-users-dev-delete-users",
        "memory": 1024,
        "timeout": 6,
        "vpc": {},
        "versionLogicalId": "DeleteDashusersLambdaVersionmknDxT9tgKwgnt10GsUXzMME9tTytOwv2mImhvbPfY"
      },
      "signedUrl": {
        "handler": "signedUrl/handler.signedS3Url",
        "package": {
          "patterns": [
            "signedUrl/handler.js"
          ],
          "artifact": "/Users/fpanchi/Documents/Cursos/serverless/.serverless/signedUrl.zip"
        },
        "events": [
          {
            "http": {
              "path": "signedUrl",
              "method": "get",
              "request": {
                "parameters": {
                  "method.request.querystring.filename": true
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "crud-serverless-users-dev-signedUrl",
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "SignedUrlLambdaVersionwRxBa519Je8NcXTa88ICnmQgyRLHxcasORb2CmbV0U"
      },
      "thumbGenerator": {
        "handler": "thumbnail/handler.thumbnailGenerator",
        "layers": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"ThumbGeneratorLambdaFunction\"][\"Properties\"][\"Layers\"]"
        },
        "package": {
          "patterns": [
            "thumbnail/handler.js"
          ],
          "artifact": "/Users/fpanchi/Documents/Cursos/serverless/.serverless/thumbGenerator.zip"
        },
        "events": [
          {
            "s3": {
              "bucket": "bucket-serverless-course",
              "event": "s3:ObjectCreated:*",
              "existing": true,
              "rules": [
                {
                  "prefix": "upload/"
                }
              ]
            }
          }
        ],
        "name": "crud-serverless-users-dev-thumbGenerator",
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "ThumbGeneratorLambdaVersion4JIXqkmyTh2CHuG5rCTBw5ic01kSqWqbxotvd3hA"
      },
      "sqs-queueWorker": {
        "handler": "likeuser/handler.likeUser",
        "layers": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"SqsDashqueueWorkerLambdaFunction\"][\"Properties\"][\"Layers\"]"
        },
        "package": {
          "patterns": [
            "likeuser/handler.js"
          ],
          "artifact": "/Users/fpanchi/Documents/Cursos/serverless/.serverless/sqs-queueWorker.zip"
        },
        "events": [
          {
            "sqs": {
              "arn": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"IamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][5][\"Resource\"][0]"
              },
              "batchSize": 1,
              "maximumBatchingWindow": 0,
              "functionResponseType": "ReportBatchItemFailures"
            }
          }
        ],
        "name": "crud-serverless-users-dev-sqs-queueWorker",
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs20.x",
        "vpc": {},
        "versionLogicalId": "SqsDashqueueWorkerLambdaVersion9xwAE9kw4z1dOYUjz974D2GpE0D8CT1TJO6iOahrI"
      }
    },
    "resources": {
      "Resources": {
        "usersTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "usersTable",
            "AttributeDefinitions": [
              {
                "AttributeName": "pk",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "pk",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            }
          }
        },
        "S3Bucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "PublicAccessBlockConfiguration": {
              "BlockPublicAcls": false,
              "BlockPublicPolicy": false
            },
            "BucketName": "bucket-serverless-course"
          }
        },
        "SampleBucketPolicy": {
          "Type": "AWS::S3::BucketPolicy",
          "Properties": {
            "Bucket": {
              "Ref": "S3Bucket"
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Action": [
                    "s3:GetObject"
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "S3Bucket"
                        },
                        "/*"
                      ]
                    ]
                  },
                  "Principal": "*"
                }
              ]
            }
          }
        },
        "sqsqueueDlq73C8BFDF": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "MessageRetentionPeriod": 1209600,
            "QueueName": "crud-serverless-users-dev-sqs-queue-dlq"
          },
          "UpdateReplacePolicy": "Delete",
          "DeletionPolicy": "Delete"
        },
        "sqsqueueQueue2D4D9CB5": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "QueueName": "likequeue",
            "RedrivePolicy": {
              "deadLetterTargetArn": {
                "Fn::GetAtt": [
                  "sqsqueueDlq73C8BFDF",
                  "Arn"
                ]
              },
              "maxReceiveCount": 3
            },
            "VisibilityTimeout": 36
          },
          "UpdateReplacePolicy": "Delete",
          "DeletionPolicy": "Delete"
        }
      },
      "Outputs": {
        "sqsqueueQueueArnE88B4375": {
          "Description": "ARN of the \"sqs-queue\" SQS queue.",
          "Value": {
            "Fn::GetAtt": [
              "sqsqueueQueue2D4D9CB5",
              "Arn"
            ]
          }
        },
        "sqsqueueQueueUrl3809BBF1": {
          "Description": "URL of the \"sqs-queue\" SQS queue.",
          "Value": {
            "Ref": "sqsqueueQueue2D4D9CB5"
          }
        },
        "sqsqueueDlqUrl1FF18D38": {
          "Description": "URL of the \"sqs-queue\" SQS dead letter queue.",
          "Value": {
            "Ref": "sqsqueueDlq73C8BFDF"
          }
        }
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "crud-serverless-users",
      "provider": {
        "name": "aws",
        "runtime": "nodejs20.x",
        "apiGateway": {
          "apiKeys": [
            "crud-serverless-user-apikey"
          ]
        },
        "iam": {
          "role": {
            "statements": [
              {
                "Effect": "Allow",
                "Action": [
                  "dynamodb:*"
                ],
                "Resource": "arn:aws:dynamodb:us-east-1:527802614022:table/usersTable"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "s3:*"
                ],
                "Resource": "arn:aws:s3:::bucket-serverless-course/*"
              },
              {
                "Effect": "Allow",
                "Action": [
                  "sqs:SendMessage",
                  "sqs:ChangeMessageVisibility"
                ],
                "Resource": [
                  "${Token[TOKEN.26]}"
                ]
              }
            ]
          }
        },
        "environment": {
          "BUCKET": "bucket-serverless-course",
          "SECRET_EGG": "LmNvbs9YXN0Z"
        },
        "stage": "dev",
        "region": "us-east-1",
        "versionFunctions": true
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "package": {
        "individually": true,
        "patterns": [
          "!*/**"
        ],
        "exclude": [
          "./**"
        ],
        "artifactsS3KeyDirname": "serverless/crud-serverless-users/dev/code-artifacts"
      },
      "custom": {
        "dynamodb": {
          "stages": [
            "dev"
          ],
          "start": {
            "port": 8000,
            "inMemory": true,
            "migrate": true
          }
        },
        "apiGatewayServiceProxies": [
          {
            "sqs": {
              "path": "/likeuser",
              "method": "post",
              "queueName": "likequeue",
              "cors": true,
              "response": {
                "template": {
                  "success": "{ \"message\": \"accepted\" }",
                  "clientError": "{ \"message\": \"there is an error in your request\" }",
                  "serverError": "{ \"message\": \"there was an error handling your request\" }"
                }
              }
            }
          }
        ]
      },
      "constructs": {
        "sqs-queue": {
          "type": "queue",
          "batchSize": 1,
          "worker": {
            "handler": "likeuser/handler.likeUser",
            "layers": [
              {
                "Ref": "BaseLambdaLayer"
              }
            ],
            "package": {
              "patterns": [
                "likeuser/handler.js"
              ]
            },
            "events": [
              {
                "sqs": {
                  "arn": "${Token[TOKEN.26]}",
                  "batchSize": 1,
                  "maximumBatchingWindow": 0,
                  "functionResponseType": "ReportBatchItemFailures"
                }
              }
            ]
          },
          "extensions": {
            "queue": {
              "Properties": {
                "QueueName": "likequeue"
              }
            }
          }
        }
      },
      "functions": {
        "custom-authorizer": {
          "handler": "authorizer/handler.authorize",
          "package": {
            "patterns": [
              "authorizer/handler.js"
            ]
          },
          "events": [],
          "name": "crud-serverless-users-dev-custom-authorizer"
        },
        "get-users": {
          "handler": "getUsers/handler.getUsers",
          "layers": [
            {
              "Ref": "BaseLambdaLayer"
            }
          ],
          "package": {
            "patterns": [
              "getUsers/handler.js"
            ]
          },
          "events": [
            {
              "http": {
                "path": "users/{id}",
                "method": "GET",
                "request": {
                  "parameters": {
                    "paths": {
                      "id": true
                    }
                  }
                }
              }
            }
          ],
          "name": "crud-serverless-users-dev-get-users"
        },
        "create-users": {
          "handler": "createUsers/handler.createUsers",
          "layers": [
            {
              "Ref": "BaseLambdaLayer"
            }
          ],
          "package": {
            "patterns": [
              "createUsers/handler.js"
            ]
          },
          "events": [
            {
              "http": {
                "path": "users",
                "method": "POST",
                "request": {
                  "schemas": {
                    "application/json": {
                      "$schema": "https://json-schema.org/draft-04/schema#",
                      "title": "User",
                      "type": "object",
                      "required": [
                        "name",
                        "age"
                      ],
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The person's first name."
                        },
                        "age": {
                          "description": "Age in years which must be equal to or greater than zero.",
                          "type": "integer",
                          "minimum": 18
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "name": "crud-serverless-users-dev-create-users"
        },
        "update-users": {
          "handler": "updateUsers/handler.updateUsers",
          "package": {
            "patterns": [
              "updateUsers/handler.js"
            ]
          },
          "events": [
            {
              "http": {
                "path": "users/{id}",
                "method": "PATCH",
                "request": {
                  "parameters": {
                    "paths": {
                      "id": true
                    }
                  },
                  "schemas": {
                    "application/json": {
                      "$schema": "https://json-schema.org/draft-04/schema#",
                      "title": "User",
                      "type": "object",
                      "required": [
                        "name",
                        "age"
                      ],
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The person's first name."
                        },
                        "age": {
                          "description": "Age in years which must be equal to or greater than zero.",
                          "type": "integer",
                          "minimum": 18
                        }
                      }
                    }
                  }
                }
              }
            }
          ],
          "name": "crud-serverless-users-dev-update-users"
        },
        "delete-users": {
          "handler": "deleteUsers/handler.deleteUsers",
          "runtime": "python3.8",
          "package": {
            "patterns": [
              "deleteUsers/handler.py"
            ]
          },
          "events": [
            {
              "http": {
                "path": "users/{id}",
                "method": "DELETE",
                "request": {
                  "parameters": {
                    "paths": {
                      "id": true
                    }
                  }
                }
              }
            }
          ],
          "name": "crud-serverless-users-dev-delete-users"
        },
        "signedUrl": {
          "handler": "signedUrl/handler.signedS3Url",
          "package": {
            "patterns": [
              "signedUrl/handler.js"
            ]
          },
          "events": [
            {
              "http": {
                "path": "signedUrl",
                "method": "GET",
                "request": {
                  "parameters": {
                    "querystrings": {
                      "filename": true
                    }
                  }
                }
              }
            }
          ],
          "name": "crud-serverless-users-dev-signedUrl"
        },
        "thumbGenerator": {
          "handler": "thumbnail/handler.thumbnailGenerator",
          "layers": [
            {
              "Ref": "BaseLambdaLayer"
            }
          ],
          "package": {
            "patterns": [
              "thumbnail/handler.js"
            ]
          },
          "events": [
            {
              "s3": {
                "bucket": "bucket-serverless-course",
                "event": "s3:ObjectCreated:*",
                "existing": true,
                "rules": [
                  {
                    "prefix": "upload/"
                  }
                ]
              }
            }
          ],
          "name": "crud-serverless-users-dev-thumbGenerator"
        },
        "sqs-queueWorker": {
          "handler": "likeuser/handler.likeUser",
          "layers": [
            {
              "Ref": "BaseLambdaLayer"
            }
          ],
          "package": {
            "patterns": [
              "likeuser/handler.js"
            ]
          },
          "events": [
            {
              "sqs": {
                "arn": "${Token[TOKEN.26]}",
                "batchSize": 1,
                "maximumBatchingWindow": 0,
                "functionResponseType": "ReportBatchItemFailures"
              }
            }
          ],
          "name": "crud-serverless-users-dev-sqs-queueWorker"
        }
      },
      "layers": {
        "base": {
          "name": "prod-dependencies",
          "compatibleRuntimes": [
            "nodejs20.x"
          ],
          "package": {
            "artifact": "app/nodejs.zip"
          }
        }
      },
      "resources": {
        "Resources": {
          "usersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "usersTable",
              "AttributeDefinitions": [
                {
                  "AttributeName": "pk",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "pk",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              }
            }
          },
          "S3Bucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "PublicAccessBlockConfiguration": {
                "BlockPublicAcls": false,
                "BlockPublicPolicy": false
              },
              "BucketName": "bucket-serverless-course"
            }
          },
          "SampleBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "S3Bucket"
              },
              "PolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Action": [
                      "s3:GetObject"
                    ],
                    "Effect": "Allow",
                    "Resource": {
                      "Fn::Join": [
                        "",
                        [
                          "arn:aws:s3:::",
                          {
                            "Ref": "S3Bucket"
                          },
                          "/*"
                        ]
                      ]
                    },
                    "Principal": "*"
                  }
                ]
              }
            }
          }
        }
      }
    },
    "layers": {
      "base": {
        "name": "prod-dependencies",
        "compatibleRuntimes": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"BaseLambdaLayer\"][\"Properties\"][\"CompatibleRuntimes\"]"
        },
        "package": {
          "artifact": "app/nodejs.zip"
        },
        "artifactAlreadyUploaded": true
      }
    },
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "individually": true,
    "artifactDirectoryName": "serverless/crud-serverless-users/dev/1708534146554-2024-02-21T16:49:06.554Z",
    "artifact": ""
  }
}